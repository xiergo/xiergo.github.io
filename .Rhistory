if( legend ){
# separate correlations
res$local <- list(lm=list(), cortest=list())
lco <- t(sapply(1:ncol(x), function(i){
co <- lm(y[,i] ~ x[,i])
res$local$lm[[i]] <<- co
cotest <- cor.test( as.numeric(x[, i]), as.numeric(y[, i]) )
res$local$cortest[[i]] <<- cotest
rsq <- CI.Rsqlm(co)
return(round(c(Rsq=rsq$Rsq
, confint=rsq$UCL - rsq$Rsq
, rho=cotest$estimate
, alpha=co$coef[2L]), 2))
#				z <- as.numeric(cor.test(x[,i], y[,i])[c('estimate', 'p.value')])
#				z[1] <- round.pretty(z[1], 2)
#				z[2] <- round.pretty(z[2], 3)
#				z
}
))
#
ct.labs <- sapply(seq_along(ct.labs), function(i){
ci <- if( confint ) str_c(' +/- ', lco[i,2]) else ''
bquote(.(sprintf('%s (', colnames(y)[i]))
~ alpha == .(sprintf(' %0.2f | ', lco[i,4]))
~ rho == .(sprintf(' %.02f | ', lco[i,3]))
~ R^2 == .(sprintf(' %0.2f %s)', lco[i,1], ci)))
})
}
df <- data.frame(x = melt(x), y = melt(y))
df[[5L]] <- factor(df[[5L]], levels = colnames(y))
ct <- colnames(df)[5L]
ct.title <- gsub('y.', '', ct, fixed = TRUE)
p <- ggplot(df, aes_string(x='x.value', y='y.value'
, color = ct)) +
geom_point(size=2) +
xlab(gpar$xlab) + ylab(gpar$ylab) +
scale_color_discrete(labels = ct.labs) +
geom_abline(slope = 1, linetype = 1) +
labs(color = NULL)+
xlim(0,1)+ylim(0,1)
if( legend ){
p <- p + theme(legend.position = 'bottom') +
guides(color = guide_legend(ncol = 1))
}else{
p <- p + theme(legend.position = 'none')
}
p$correlations <- res
p=p+annotate('text',label=deparse(glo.lab),parse=T,fontface="bold", x = 0.7,y=0)+
theme(legend.position = c(0,1),
legend.justification = c("left", "top"),
legend.box.background = element_rect(),
legend.box.margin = margin(1,15,1,1),
panel.background = element_rect(fill='white',color='black',size=1),
legend.key=element_rect(fill='white'),
plot.margin = margin(r=20,l=8,b=8,t=20))+
ggtitle(gpar$main)+
theme(plot.title = element_text(hjust = 0.5))
p
}
#############################the beginning ########################
# initialise result list
res <- list()
# get extra graphical parameters
gpar <- list(...)
# plot a correlation plot of y is not missing
if( !missing(y) ){
xvar <- deparse(substitute(x))
# extract mixture coefficient from x
if( isNMFfit(x) ){
gpar <- .set.list.defaults(gpar
, xlab=paste("NMF model", xvar, "- Method:", algorithm(x)))
x <- fit(x)
}
if( is.nmf(x) ){
gpar <- .set.list.defaults(gpar
, main="Mixture coefficient profile correlations"
, xlab=paste("NMF model", xvar))
x <- coef(x)
if( is.null(rownames(x)) )
rownames(x) <- paste("basis", 1:nrow(x), sep='_')
}else if( is(x, 'ExpressionSet') ){
x <- Biobase::exprs(x)
gpar <- .set.list.defaults(gpar
, main="Expression profile correlations"
, xlab=paste("ExpressionSet", xvar))
}else{
gpar <- .set.list.defaults(gpar
, xlab=paste("Matrix ", xvar))
}
# at this stage x must be a matrix
if( !is.matrix(x) )
stop("NMF::profplot - Invalid argument `x`: could not extract mixture coefficient matrix")
# extract mixture coefficient from y
yvar <- deparse(substitute(y))
if( isNMFfit(y) ){
gpar <- .set.list.defaults(gpar
, ylab=paste("NMF model", yvar, "- Method:", algorithm(y)))
y <- fit(y)
}
if( is.nmf(y) ){
gpar <- .set.list.defaults(gpar
, main="Mixture coefficient profile correlations"
, ylab=paste("NMF model", yvar))
y <- coef(y)
}else if( is(y, 'ExpressionSet') ){
y <- Biobase::exprs(y)
gpar <- .set.list.defaults(gpar
, main="Expression profile correlations"
, ylab=paste("ExpressionSet", yvar))
}else{
gpar <- .set.list.defaults(gpar
, ylab=paste("Matrix ", yvar))
}
# at this stage y must be a matrix
if( !is.matrix(y) )
stop("NMF::profplot - Invalid argument `y`: could not extract profile matrix")
# match names if requested
if( match.names && !is.null(rownames(x)) && !is.null(rownames(y)) ){
# match the row in x to the rows in y
y.idx <- match(rownames(x), rownames(y), nomatch=0L)
x.idx <- which(y.idx!=0L)
# subset and reorder if possible
if( length(x.idx) > 0L ){
res$y.idx <- y.idx[x.idx]
y <- y[y.idx, , drop = FALSE]
res$x.idx <- x.idx
x <- x[x.idx, , drop = FALSE]
}
}
# scale to proportions if requested
if( missing(scale) ) scale <- NULL
else if( isTRUE(scale) ) scale <- 'max'
else if( isFALSE(scale) ) scale <- 'none'
scale <- match.arg(scale)
scales <- 'free'
if( scale == 'max' ){
gpar <- .set.list.defaults(gpar
, xlim=c(0,1), ylim=c(0,1))
# scale x
iscale <- (xm <- apply(abs(x), 1L, max)) > 0
x[iscale, ] <- sweep(x[iscale, , drop = FALSE], 1L, xm[iscale], '/')
# scale y
iscale <- (ym <- apply(abs(y), 1L, max)) > 0
y[iscale, ] <- sweep(y[iscale, , drop = FALSE], 1L, ym[iscale], '/')
scales <- 'fixed'
} else if( scale == 'c1' ){
gpar <- .set.list.defaults(gpar
, xlim=c(0,1), ylim=c(0,1))
x <- sum2one(x)
y <- sum2one(y)
}else{
Mx <- max(x, y); mx <- min(x, y)
# extend default limits by a 0.25 factor
Mx <- Mx * 1.25
mx <- mx * 0.75
gpar <- .set.list.defaults(gpar
, xlim=c(mx,Mx), ylim=c(mx,Mx))
}
gpar <- .set.list.defaults(gpar
, main="Profile correlations")
# plot the correlation plot
p <- do.call(corplot, c(list(x=t(x), y=t(y), scales = scales, legend=legend, confint=confint, add=add), gpar))
p <- expand_list(p, list(idx.map = res))
# return result list
return( p )
}
# extract mixture coefficient
xvar <- deparse(substitute(x))
if( isNMFfit(x) ){
gpar <- .set.list.defaults(gpar, main=paste("Mixture coefficient profiles\nNMF method:", algorithm(x), "- runs:", nrun(x)))
x <- fit(x)
}
if( is.nmf(x) ){
gpar <- .set.list.defaults(gpar, main="Mixture coefficient profiles")
x <- coef(x)
}else if( is(x, 'ExpressionSet') ){
x <- Biobase::exprs(x)
gpar <- .set.list.defaults(gpar, main="Expression profiles")
}
# at this stage x must be a matrix
if( !is.matrix(x) )
stop("NMF::profplot - Invalid argument `x`: could not extract profile matrix")
# scale to proportions if requested
if( missing(scale) || !isTRUE(scale) ) scale <- FALSE
if( scale ){
gpar <- .set.list.defaults(gpar, ylim=c(0,1))
x <- sum2one(x)
}
# reorder the samples if requested
if( missing(labels) ){
labels <-
if( !is.null(colnames(x)) ) colnames(x)
else 1:ncol(x)
} else if( length(labels) != ncol(x) ){
labels <- rep(labels, length.out=ncol(x))
#	stop("NMF::profplot - Invalid argument `labels`: length should be equal to the number of columns in ", xvar, " [=", ncol(x),"]")
}
# check annotation
if( !missing(annotation) && length(annotation) != ncol(x) )
stop("NMF::profplot - Invalid argument `annotation`:: length should be equal to the number of columns in ", xvar, " [=", ncol(x),"]")
# reorder the columns if requested
if( !missing(Colv) && !is_NA(Colv) ){
ord <- if( length(Colv) == 1 ){
if( !is.numeric(Colv) || abs(Colv) > nrow(x) )
stop("NMF::profplot - Invalid singel argument `Colv`: should be an integer between -nrow(x) and nrow(", xvar,") (i.e. [[-", nrow(x),",", nrow(x),"]])")
order(x[abs(Colv),], decreasing=Colv<0)
}else{
if( length(Colv) != ncol(x) )
stop("NMF::profplot - Invalid length for argument `Colv`: should be of length ncol(", xvar, ") [=", nrow(x),"]")
if( is.integer(Colv) && length(setdiff(Colv, 1:ncol(x)))==0 ) Colv
else order(Colv)
}
# use Colv as annotation if not requested otherwise
if( missing(annotation) && is.factor(Colv) )
annotation <- Colv
# reorder all relevant quantities
x <- x[,ord]
labels <- labels[ord]
if( !missing(annotation) && !is_NA(annotation) )
annotation <- annotation[ord]
}
# set default arguments
cols <- rainbow(nrow(x))
gpar <- .set.list.defaults(gpar
, xlab="Samples"
, ylab="Mixture coefficient value"
, main="Profile plot"
, type='o'
, lty=1
, pch=19
, cex=0.8
, col=cols)
# plot using matplot
do.call(matplot, c(list(x=t(x)), gpar, xaxt='n'))
# add legend if requested
if( !isFALSE(legend) ){
if( isTRUE(legend) )
legend <- 'topleft'
# use the rownames for the legend
leg <- rownames(x)
if( is.null(leg) )
leg <- paste('basis', 1:nrow(x), sep='_')
legend(legend, legend=leg, col=gpar$col, lwd=1, pch=gpar$pch)
}
# axis ticks
px <- 1:ncol(x)
axis(1, at = px, labels = FALSE)
# setup grid-base mixed graphic
vps <- baseViewports()
pushViewport(vps$inner, vps$figure, vps$plot)
# clean up on exit
on.exit(popViewport(3), add=TRUE)
voffset <- 1
# add sample annotation
if( !missing(annotation) && !is_NA(annotation) && is.factor(annotation) ){
grid.rect(x = unit(px, "native"), unit(-voffset, "lines")
, width = unit(1, 'native'), height = unit(1, "lines")
, gp = gpar(fill=alphacol(rainbow(nlevels(annotation))[annotation], 50), col = 'gray'))
voffset <- voffset+1
}
# add labels
if( !is_NA(labels) ){
# setup grid-base mixed graphic
#library(gridBase)
#vps <- baseViewports()
#pushViewport(vps$inner, vps$figure, vps$plot)
# add axis
adj <- if( is.character(labels) && max(nchar(labels)) >= 7 ) list(just='right', rot=45)
else list(just='center', rot=0)
grid.text(labels
, x = unit(px, "native"), y = unit(-voffset,"lines")
, just = adj$just, rot = adj$rot)
voffset <- voffset+1
# clean up on exit
#popViewport(3)
}
invisible(nrow(x))
# add xlab
#if( nchar(xlab) > 0 )
#	grid.text(xlab, x = unit(length(px)/2, "native"), y = unit(-voffset,"lines"), just = 'center')
}
## set the first colnum as the rowname
set.rname=function(x){
rownames(x)=x[,1]
x=x[,-1]
x
}
## rename some celltypes to get consistent names
## parameter @ H : an array with the celltypes as its rownames and
##                 the symple names as its colnames
cels=list(B_cell=c('B-CD19','b.cells','B.cells','Bcells','B_cell','B lineage'
,'b cells','B.cells.naive','B.cells.memory','Plasma.cells',
'B','B act','PB-CD19-positive B cells','B-cells','B cells','B aIgM'),
Granulocyte=c("Granulocyte-CD66b","neutrophils",'Neutrophil',
'Neutrophils','Mast.cells.resting','Mast.cells.activated',
'Eosinophils','Endothelial','neutro','GRANS','Neturophils'),
Monocyte=c("Monocyte-CD14","monocytes",'Macrophage',
'Monocytic lineage','Monocytes','Macrophages',
'Macrophages.M0','Macrophages.M1','Macrophages.M2',
'Dendritic.cells.resting','Dendritic.cells.activated',
'Monocyte','mono','mono act','PB-CD14-positive Monocytes'),
NK_cell=c("NK-CD56","nk.cells",'NK cells','NKcells','nk cells',
'NK.cells.resting','NK.cells.activated',"NK.cells",'NK',
'NK','NK act','PB-CD56-positive NK cells'),
T_cell=c("T-CD4","t.cells",'T_cell.CD4','CD4_Tcells',
'T cells','t cells','T.cells.CD4.naive',
'T.cells.CD4.memory.resting','T.cells.CD4.memory.activated',
'T.cells.follicular.helper','T.cells.regulatory..Tregs.',
'T.cells.gamma.delta',"CD4.T.cells",'T','Th act','Tc',
'Tc act','PB-CD4-positive T cells','T-cells'))
retype <- function(H,celltype.list) {
ls.H=list()
for (i in names(celltype.list)) {
temp=apply(H[rownames(H) %in% celltype.list[[i]],,drop=F],2,sum)
if (sum(temp)!=0) ls.H[[i]]=temp
}
H.new=t(as.matrix(as.data.frame(ls.H)))
H.new
}
## make the sum each colnum of the array be one
sum2one <- function(x){
apply(x,2,function(i) i/sum(i))
}
## deviation standardization
dest <- function(x){
(x-min(x))/(max(x)-min(x))
}
## deviation standardization by rows
dest.by.row <- function(x){
t(apply(x,1,dest))
}
expr=read.table('C:/Users/xiergo/Desktop/benchmark/GSE64385_series_matrix2.txt',header=T,sep='\t',quote='')
rownames(expr)=expr[,1]
expr <- expr[,-1]
head(expr)
expr=read.table('C:/Users/xiergo/Desktop/benchmark/GSE64385_series_matrix2.txt',header=T,sep='\t',quote='')
head(expr)
expr=expr[,-c(2,3)]
head(expr)
expr=set.rname(expr)
expr=as.matrix(expr)
expr1=2^expr
head(expr1)
2^8.79
2^3.532078
write.table(expr1,'C:/Users/xiergo/Desktop/benchmark/GSE64385.txt',row.names = T,sep='\t',quote=F)
pro=read.table('C:/Users/xiergo/Desktop/benchmark/GSE64385_proportion.txt',header = T,sep='\t',quote='')
pro1=pro[,-c(2,3)]
pro1
pro1=pro[-c(1,2),]
pro
pro1
write.table(pro1,'C:/Users/xiergo/Desktop/benchmark/GSE64385p.txt',row.names = F,quote=F,sep='\t')
pro1=set.rname(pro1)
pro1=as.matrix(pro1)
pro1=t(pro1)
write.table(pro1,'C:/Users/xiergo/Desktop/benchmark/GSE64385p.txt',row.names = T,quote=F,sep='\t')
a=c('bb.R','vv.r','aa.R','afdasg.Rout')
b=grep('\w+\.R$',a)
b=grep('w+\.R$')
b=grep('w+\.R$',a)
b=grep('w*\.R$',a)
b=grep('\.R$',a)
b=grep('\\.R$',a)
b
rev(a)
normalizePath('C:/Users/xiergo/Desktop/benchmark/GSE64385_log_Abbas_sig.pdf')
normalizePath('GSE64385_log_Abbas_sig.pdf')
normalizePath('benchmark/GSE64385_log_Abbas_sig.pdf')
getwd
getwd()
normalizePath('1.pdf')
log2(4)
cor.test(x=c(1,2,3.5),y=c(4,5.6,7))
a=cor.test(x=c(1,2,3.5),y=c(4,5.6,7))
a$p.value
a$estimate
p=0.000000534
p
sprintf('%0.3f',p)
sprintf(p)
sprintf('%f',p)
as.string(1)
string(1)
str(1)
as.str(1)
as.character(p)
sprinf('%s',as.character(p))
sprintf('%s',as.character(p))
bquote(~p==.(sprintf('%s |',as.character(p))))
bquote(~p==.(sprintf('%0.03f |',p)))
sprintf('%e',p)
sprintf('%2e',p)
sprintf('%3e',p)
sprintf('%.2e',p)
library(GEOquery)
?GEOquery
g=getGEO('GSE93722')
str(g)
Columns(g)
Columns(gds)
head(Meta(gse))
head(Meta(g))
g=getGEO('GSE93722',GSEMatrix = F)
head(Meta(g))
names(GSMList(g))
gse=getGEO('GSE93722',GSEMatrix = F)
head(Meta(gse))
names(GSMList(gse))
GSMList(gse)[[1]]
s=0
for (i in 1:8) s=s+i^2
s
s/12
1/0.3-(5*0.7^5)/(1-0.7^5)
rank(c(2,3,5))
rank(c(6,4,NA,4,9))
?rank
xtrmf(c(6,4,NA,4,9))
xtfrm(c(6,4,NA,4,9))
library(ggplot2)
library(gridExtra)
library(corrplot)
df=read.delim('C:/Users/xiergo/Desktop/total benchmark/integrate.txt',as.is = T)
df$Cor[abs(df$Cor)==999]=NA
order(c(6,4,NA,4,9))
getwd()
?read.delim
install.packages("CellMix")
packages()
installed.packages()
installed.packages('affy')
library(CellMix)
?ged
1+1
library('CellMix')
require(stats); require(graphics)
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
require(stats); require(graphics)
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
g
xg
?split
sapply(xg, length)
a=paste0(1:10,letters[1:10],sep='-')
a
a=paste(1:10,letters[1:10],sep='-')
a
strsplit(a,split = '-')
a
a=factor(a)
a
a=as.character(a)
a
setwd('D:/Users/xiergo/Documents/GitHub/xiergo.github.io')
dirf=read.delim('directory.txt',quote = '\"')
head(dirf)
setwd('D:/Users/xiergo/Documents/GitHub/xiergo.github.io')
dirf=read.delim('directory.txt',quote = '\"')
head(dirf)
dirf=read.delim('directory.txt',quote = '\"')
head(dirf)
setwd('D:/Users/xiergo/Documents/GitHub/xiergo.github.io')
dirf=read.delim('directory.txt',quote = '\"')
head(dirf)
a='	<title>Xiergo\' Page</title>'
a
link=paste0('  <a href="localexplorer:',dirf$path,
'">',dirf$file,'</a>')
link
setwd('D:/Users/xiergo/Documents/GitHub/xiergo.github.io')
dirf=read.delim('directory.txt',quote = '\"')
head(dirf)
html.start=c('<!DOCTYPE html>',
'<html lang="en">',
'<head>',
'	<meta charset ="UTF-8">',
'	<title>Xiergo\' Page</title>',
'</head>',
'<body>',
'	<h1>Hello World</h1>',
'	<p>I am hosted with GitHub Pages.</p>')
link=paste0('  <a href="localexplorer:',dirf$path,
'">',dirf$file,'</a>')
html.end=c('</body>','</html>')
html=c(html.start,link,html.end)
write.table(html,'index0.html',quote = F,row.names = F)
setwd('D:/Users/xiergo/Documents/GitHub/xiergo.github.io')
dirf=read.delim('directory.txt',quote = '\"')
head(dirf)
html.start=c('<!DOCTYPE html>',
'<html lang="en">',
'<head>',
'	<meta charset ="UTF-8">',
'	<title>Xiergo\' Page</title>',
'</head>',
'<body>',
'	<h1>Hello World</h1>',
'	<p>I am hosted with GitHub Pages.</p>')
link=paste0('\t<a href="localexplorer:',dirf$path,
'">',dirf$file,'</a><br>')
html.end=c('</body>','</html>')
html=c(html.start,link,html.end)
write.table(html,'index0.html',quote = F,row.names = F,col.names = F)
